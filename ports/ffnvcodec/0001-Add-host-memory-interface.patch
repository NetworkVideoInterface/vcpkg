From 8aa4fe3cad44c3b3ffaa6a6db7aa8973fc7e940f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=E9=AB=98=E6=B1=9F=E6=9D=B0?= <gaojiangjie@sobey.com>
Date: Wed, 5 Mar 2025 10:54:21 +0800
Subject: [PATCH] Add host memory interface

---
 include/ffnvcodec/dynlink_cuda.h   | 89 ++++++++++++++++++++++++++++--
 include/ffnvcodec/dynlink_loader.h | 73 ++++++++++++++++++++++++
 2 files changed, 156 insertions(+), 6 deletions(-)

diff --git a/include/ffnvcodec/dynlink_cuda.h b/include/ffnvcodec/dynlink_cuda.h
index e6d85a6..2d90152 100644
--- a/include/ffnvcodec/dynlink_cuda.h
+++ b/include/ffnvcodec/dynlink_cuda.h
@@ -29,6 +29,7 @@
 #define FFNV_DYNLINK_CUDA_H
 
 #include <stddef.h>
+#include <stdint.h>
 
 #define CUDA_VERSION 7050
 
@@ -58,12 +59,15 @@ typedef struct CUmipmappedArray_st   *CUmipmappedArray;
 typedef struct CUgraphicsResource_st *CUgraphicsResource;
 typedef struct CUextMemory_st        *CUexternalMemory;
 typedef struct CUextSemaphore_st     *CUexternalSemaphore;
+typedef struct CUeglStreamConnection_st *CUeglStreamConnection;
 
 typedef struct CUlinkState_st *CUlinkState;
 
 typedef enum cudaError_enum {
     CUDA_SUCCESS = 0,
-    CUDA_ERROR_NOT_READY = 600
+    CUDA_ERROR_NOT_READY = 600,
+    CUDA_ERROR_LAUNCH_TIMEOUT = 702,
+    CUDA_ERROR_UNKNOWN = 999
 } CUresult;
 
 /**
@@ -154,10 +158,12 @@ typedef enum CUexternalMemoryHandleType_enum {
 } CUexternalMemoryHandleType;
 
 typedef enum CUexternalSemaphoreHandleType_enum {
-    CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD        = 1,
-    CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32     = 2,
-    CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT = 3,
-    CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE      = 4
+    CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD                = 1,
+    CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32             = 2,
+    CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT         = 3,
+    CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE              = 4,
+    CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_TIMELINE_SEMAPHORE_FD    = 9,
+    CU_EXTERNAL_SEMAPHORE_HANDLE_TYPE_TIMELINE_SEMAPHORE_WIN32 = 10,
 } CUexternalSemaphoreHandleType;
 
 typedef enum CUjit_option_enum
@@ -195,6 +201,28 @@ typedef enum CUjitInputType_enum
     CU_JIT_NUM_INPUT_TYPES
 } CUjitInputType;
 
+typedef enum CUeglFrameType
+{
+    CU_EGL_FRAME_TYPE_ARRAY = 0,
+    CU_EGL_FRAME_TYPE_PITCH = 1,
+} CUeglFrameType;
+
+typedef enum CUeglColorFormat
+{
+    CU_EGL_COLOR_FORMAT_YUV420_PLANAR = 0x00,
+    CU_EGL_COLOR_FORMAT_YUV420_SEMIPLANAR = 0x01,
+    CU_EGL_COLOR_FORMAT_YVU420_SEMIPLANAR = 0x15,
+    CU_EGL_COLOR_FORMAT_Y10V10U10_420_SEMIPLANAR = 0x17,
+    CU_EGL_COLOR_FORMAT_Y12V12U12_420_SEMIPLANAR = 0x19,
+} CUeglColorFormat;
+
+typedef enum CUd3d11DeviceList_enum
+{
+    CU_D3D11_DEVICE_LIST_ALL = 1,
+    CU_D3D11_DEVICE_LIST_CURRENT_FRAME = 2,
+    CU_D3D11_DEVICE_LIST_NEXT_FRAME = 3,
+} CUd3d11DeviceList;
+
 #ifndef CU_UUID_HAS_BEEN_DEFINED
 #define CU_UUID_HAS_BEEN_DEFINED
 typedef struct CUuuid_st {
@@ -271,6 +299,12 @@ typedef struct CUDA_RESOURCE_VIEW_DESC_st CUDA_RESOURCE_VIEW_DESC;
 
 typedef unsigned int GLenum;
 typedef unsigned int GLuint;
+/*
+ * Prefix type name to avoid collisions. Clients using these types
+ * will include the real headers with real definitions.
+ */
+typedef int32_t ffnv_EGLint;
+typedef void *ffnv_EGLStreamKHR;
 
 typedef enum CUGLDeviceList_enum {
     CU_GL_DEVICE_LIST_ALL = 1,
@@ -342,11 +376,35 @@ typedef struct CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC_st {
     unsigned int reserved[16];
 } CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC;
 
+#define CU_EGL_FRAME_MAX_PLANES 3
+typedef struct CUeglFrame_st {
+    union {
+        CUarray pArray[CU_EGL_FRAME_MAX_PLANES];
+        void* pPitch[CU_EGL_FRAME_MAX_PLANES];
+    } frame;
+    unsigned int width;
+    unsigned int height;
+    unsigned int depth;
+    unsigned int pitch;
+    unsigned int planeCount;
+    unsigned int numChannels;
+    CUeglFrameType frameType;
+    CUeglColorFormat eglColorFormat;
+    CUarray_format cuFormat;
+} CUeglFrame;
+
 #define CU_STREAM_NON_BLOCKING 1
 #define CU_EVENT_BLOCKING_SYNC 1
 #define CU_EVENT_DISABLE_TIMING 2
 #define CU_TRSF_READ_AS_INTEGER 1
 
+#define CU_MEMHOSTALLOC_PORTABLE        0x01
+#define CU_MEMHOSTALLOC_DEVICEMAP       0x02
+#define CU_MEMHOSTALLOC_WRITECOMBINED   0x04
+#define CU_MEMHOSTREGISTER_PORTABLE     0x01
+#define CU_MEMHOSTREGISTER_DEVICEMAP    0x02
+#define CU_MEMHOSTREGISTER_IOMEMORY     0x04
+
 typedef void CUDAAPI CUstreamCallback(CUstream hStream, CUresult status, void *userdata);
 
 typedef CUresult CUDAAPI tcuInit(unsigned int Flags);
@@ -370,6 +428,11 @@ typedef CUresult CUDAAPI tcuMemcpy(CUdeviceptr dst, CUdeviceptr src, size_t byte
 typedef CUresult CUDAAPI tcuMemcpyAsync(CUdeviceptr dst, CUdeviceptr src, size_t bytesize, CUstream hStream);
 typedef CUresult CUDAAPI tcuMemcpy2D_v2(const CUDA_MEMCPY2D *pcopy);
 typedef CUresult CUDAAPI tcuMemcpy2DAsync_v2(const CUDA_MEMCPY2D *pcopy, CUstream hStream);
+typedef CUresult CUDAAPI tcuMemHostAlloc(void **pp, size_t bytesize, unsigned int Flags);
+typedef CUresult CUDAAPI tcuMemFreeHost(void *p);
+typedef CUresult CUDAAPI tcuMemHostGetFlags(unsigned int *pFlags, void *p);
+typedef CUresult CUDAAPI tcuMemHostRegister_v2(void *p, size_t bytesize, unsigned int Flags);
+typedef CUresult CUDAAPI tcuMemHostUnregister(void *p);
 typedef CUresult CUDAAPI tcuMemcpyHtoD_v2(CUdeviceptr dstDevice, const void *srcHost, size_t ByteCount);
 typedef CUresult CUDAAPI tcuMemcpyHtoDAsync_v2(CUdeviceptr dstDevice, const void *srcHost, size_t ByteCount, CUstream hStream);
 typedef CUresult CUDAAPI tcuMemcpyDtoH_v2(void *dstHost, CUdeviceptr srcDevice, size_t ByteCount);
@@ -398,7 +461,7 @@ typedef CUresult CUDAAPI tcuEventQuery(CUevent hEvent);
 typedef CUresult CUDAAPI tcuEventRecord(CUevent hEvent, CUstream hStream);
 
 typedef CUresult CUDAAPI tcuLaunchKernel(CUfunction f, unsigned int gridDimX, unsigned int gridDimY, unsigned int gridDimZ, unsigned int blockDimX, unsigned int blockDimY, unsigned int blockDimZ, unsigned int sharedMemBytes, CUstream hStream, void** kernelParams, void** extra);
-typedef CUresult CUDAAPI tcuLinkCreate(unsigned int  numOptions, CUjit_option* options, void** optionValues, CUlinkState* stateOut);
+typedef CUresult CUDAAPI tcuLinkCreate(unsigned int numOptions, CUjit_option* options, void** optionValues, CUlinkState* stateOut);
 typedef CUresult CUDAAPI tcuLinkAddData(CUlinkState state, CUjitInputType type, void* data, size_t size, const char* name, unsigned int numOptions, CUjit_option* options, void** optionValues);
 typedef CUresult CUDAAPI tcuLinkComplete(CUlinkState state, void** cubinOut, size_t* sizeOut);
 typedef CUresult CUDAAPI tcuLinkDestroy(CUlinkState state);
@@ -415,6 +478,7 @@ typedef CUresult CUDAAPI tcuGraphicsUnregisterResource(CUgraphicsResource resour
 typedef CUresult CUDAAPI tcuGraphicsMapResources(unsigned int count, CUgraphicsResource* resources, CUstream hStream);
 typedef CUresult CUDAAPI tcuGraphicsUnmapResources(unsigned int count, CUgraphicsResource* resources, CUstream hStream);
 typedef CUresult CUDAAPI tcuGraphicsSubResourceGetMappedArray(CUarray* pArray, CUgraphicsResource resource, unsigned int arrayIndex, unsigned int mipLevel);
+typedef CUresult CUDAAPI tcuGraphicsResourceGetMappedPointer(CUdeviceptr *devPtrOut, size_t *sizeOut, CUgraphicsResource resource);
 
 typedef CUresult CUDAAPI tcuImportExternalMemory(CUexternalMemory* extMem_out, const CUDA_EXTERNAL_MEMORY_HANDLE_DESC* memHandleDesc);
 typedef CUresult CUDAAPI tcuDestroyExternalMemory(CUexternalMemory extMem);
@@ -427,4 +491,17 @@ typedef CUresult CUDAAPI tcuImportExternalSemaphore(CUexternalSemaphore* extSem_
 typedef CUresult CUDAAPI tcuDestroyExternalSemaphore(CUexternalSemaphore extSem);
 typedef CUresult CUDAAPI tcuSignalExternalSemaphoresAsync(const CUexternalSemaphore* extSemArray, const CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS* paramsArray, unsigned int numExtSems, CUstream stream);
 typedef CUresult CUDAAPI tcuWaitExternalSemaphoresAsync(const CUexternalSemaphore* extSemArray, const CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS* paramsArray, unsigned int numExtSems, CUstream stream);
+
+typedef CUresult CUDAAPI tcuArray3DCreate(CUarray *pHandle, const CUDA_ARRAY3D_DESCRIPTOR* pAllocateArray);
+typedef CUresult CUDAAPI tcuArrayDestroy(CUarray hArray);
+
+typedef CUresult CUDAAPI tcuEGLStreamProducerConnect(CUeglStreamConnection* conn, ffnv_EGLStreamKHR stream, ffnv_EGLint width, ffnv_EGLint height);
+typedef CUresult CUDAAPI tcuEGLStreamProducerDisconnect(CUeglStreamConnection* conn);
+typedef CUresult CUDAAPI tcuEGLStreamConsumerDisconnect(CUeglStreamConnection* conn);
+typedef CUresult CUDAAPI tcuEGLStreamProducerPresentFrame(CUeglStreamConnection* conn, CUeglFrame eglframe, CUstream* pStream);
+typedef CUresult CUDAAPI tcuEGLStreamProducerReturnFrame(CUeglStreamConnection* conn, CUeglFrame* eglframe, CUstream* pStream);
+
+typedef CUresult CUDAAPI tcuD3D11GetDevice(CUdevice *device, void *dxgiAdapter);
+typedef CUresult CUDAAPI tcuD3D11GetDevices(unsigned int *deviceCountOut, CUdevice *devices, unsigned int deviceCount, void *d3d11device, CUd3d11DeviceList listType);
+typedef CUresult CUDAAPI tcuGraphicsD3D11RegisterResource(CUgraphicsResource *cudaResourceOut, void *d3d11Resource, unsigned int flags);
 #endif
diff --git a/include/ffnvcodec/dynlink_loader.h b/include/ffnvcodec/dynlink_loader.h
index 84ff3a8..fa3cb4e 100644
--- a/include/ffnvcodec/dynlink_loader.h
+++ b/include/ffnvcodec/dynlink_loader.h
@@ -157,6 +157,11 @@ typedef struct CudaFunctions {
     tcuMemcpyAsync *cuMemcpyAsync;
     tcuMemcpy2D_v2 *cuMemcpy2D;
     tcuMemcpy2DAsync_v2 *cuMemcpy2DAsync;
+    tcuMemHostAlloc *cuMemHostAlloc;
+    tcuMemFreeHost *cuMemFreeHost;
+    tcuMemHostGetFlags *cuMemHostGetFlags;
+    tcuMemHostRegister_v2 *cuMemHostRegister;
+    tcuMemHostUnregister *cuMemHostUnregister;
     tcuMemcpyHtoD_v2 *cuMemcpyHtoD;
     tcuMemcpyHtoDAsync_v2 *cuMemcpyHtoDAsync;
     tcuMemcpyDtoH_v2 *cuMemcpyDtoH;
@@ -202,6 +207,7 @@ typedef struct CudaFunctions {
     tcuGraphicsMapResources *cuGraphicsMapResources;
     tcuGraphicsUnmapResources *cuGraphicsUnmapResources;
     tcuGraphicsSubResourceGetMappedArray *cuGraphicsSubResourceGetMappedArray;
+    tcuGraphicsResourceGetMappedPointer *cuGraphicsResourceGetMappedPointer;
 
     tcuImportExternalMemory *cuImportExternalMemory;
     tcuDestroyExternalMemory *cuDestroyExternalMemory;
@@ -216,12 +222,38 @@ typedef struct CudaFunctions {
     tcuSignalExternalSemaphoresAsync *cuSignalExternalSemaphoresAsync;
     tcuWaitExternalSemaphoresAsync *cuWaitExternalSemaphoresAsync;
 
+    tcuArray3DCreate *cuArray3DCreate;
+    tcuArrayDestroy *cuArrayDestroy;
+
+    tcuEGLStreamProducerConnect *cuEGLStreamProducerConnect;
+    tcuEGLStreamProducerDisconnect *cuEGLStreamProducerDisconnect;
+    tcuEGLStreamConsumerDisconnect *cuEGLStreamConsumerDisconnect;
+    tcuEGLStreamProducerPresentFrame *cuEGLStreamProducerPresentFrame;
+    tcuEGLStreamProducerReturnFrame *cuEGLStreamProducerReturnFrame;
+
+#if defined(_WIN32) || defined(__CYGWIN__)
+    tcuD3D11GetDevice *cuD3D11GetDevice;
+    tcuD3D11GetDevices *cuD3D11GetDevices;
+    tcuGraphicsD3D11RegisterResource *cuGraphicsD3D11RegisterResource;
+#endif
+
     FFNV_LIB_HANDLE lib;
 } CudaFunctions;
 #else
 typedef struct CudaFunctions CudaFunctions;
 #endif
 
+typedef struct CudaHostFunctions {
+    tcuCtxPushCurrent_v2 *cuCtxPushCurrent;
+    tcuCtxPopCurrent_v2 *cuCtxPopCurrent;
+    tcuMemHostAlloc *cuMemHostAlloc;
+    tcuMemFreeHost *cuMemFreeHost;
+    tcuMemHostGetFlags *cuMemHostGetFlags;
+    tcuMemHostRegister_v2 *cuMemHostRegister;
+    tcuMemHostUnregister *cuMemHostUnregister;
+    FFNV_LIB_HANDLE lib;
+} CudaHostFunctions;
+
 typedef struct CuvidFunctions {
     tcuvidGetDecoderCaps *cuvidGetDecoderCaps;
     tcuvidCreateDecoder *cuvidCreateDecoder;
@@ -269,6 +301,11 @@ static inline void cuda_free_functions(CudaFunctions **functions)
 }
 #endif
 
+static inline void cuda_host_free_functions(CudaHostFunctions **functions)
+{
+    GENERIC_FREE_FUNC();
+}
+
 static inline void cuvid_free_functions(CuvidFunctions **functions)
 {
     GENERIC_FREE_FUNC();
@@ -304,6 +341,11 @@ static inline int cuda_load_functions(CudaFunctions **functions, void *logctx)
     LOAD_SYMBOL(cuMemcpyAsync, tcuMemcpyAsync, "cuMemcpyAsync");
     LOAD_SYMBOL(cuMemcpy2D, tcuMemcpy2D_v2, "cuMemcpy2D_v2");
     LOAD_SYMBOL(cuMemcpy2DAsync, tcuMemcpy2DAsync_v2, "cuMemcpy2DAsync_v2");
+    LOAD_SYMBOL(cuMemHostAlloc, tcuMemHostAlloc, "cuMemHostAlloc");
+    LOAD_SYMBOL(cuMemFreeHost, tcuMemFreeHost, "cuMemFreeHost");
+    LOAD_SYMBOL(cuMemHostGetFlags, tcuMemHostGetFlags, "cuMemHostGetFlags");
+    LOAD_SYMBOL(cuMemHostRegister, tcuMemHostRegister_v2, "cuMemHostRegister_v2");
+    LOAD_SYMBOL(cuMemHostUnregister, tcuMemHostUnregister, "cuMemHostUnregister");
     LOAD_SYMBOL(cuMemcpyHtoD, tcuMemcpyHtoD_v2, "cuMemcpyHtoD_v2");
     LOAD_SYMBOL(cuMemcpyHtoDAsync, tcuMemcpyHtoDAsync_v2, "cuMemcpyHtoDAsync_v2");
     LOAD_SYMBOL(cuMemcpyDtoH, tcuMemcpyDtoH_v2, "cuMemcpyDtoH_v2");
@@ -349,6 +391,7 @@ static inline int cuda_load_functions(CudaFunctions **functions, void *logctx)
     LOAD_SYMBOL(cuGraphicsMapResources, tcuGraphicsMapResources, "cuGraphicsMapResources");
     LOAD_SYMBOL(cuGraphicsUnmapResources, tcuGraphicsUnmapResources, "cuGraphicsUnmapResources");
     LOAD_SYMBOL(cuGraphicsSubResourceGetMappedArray, tcuGraphicsSubResourceGetMappedArray, "cuGraphicsSubResourceGetMappedArray");
+    LOAD_SYMBOL(cuGraphicsResourceGetMappedPointer, tcuGraphicsResourceGetMappedPointer, "cuGraphicsResourceGetMappedPointer_v2");
 
     LOAD_SYMBOL_OPT(cuDeviceGetUuid, tcuDeviceGetUuid, "cuDeviceGetUuid");
     LOAD_SYMBOL_OPT(cuImportExternalMemory, tcuImportExternalMemory, "cuImportExternalMemory");
@@ -363,10 +406,40 @@ static inline int cuda_load_functions(CudaFunctions **functions, void *logctx)
     LOAD_SYMBOL_OPT(cuSignalExternalSemaphoresAsync, tcuSignalExternalSemaphoresAsync, "cuSignalExternalSemaphoresAsync");
     LOAD_SYMBOL_OPT(cuWaitExternalSemaphoresAsync, tcuWaitExternalSemaphoresAsync, "cuWaitExternalSemaphoresAsync");
 
+    LOAD_SYMBOL(cuArray3DCreate, tcuArray3DCreate, "cuArray3DCreate_v2");
+    LOAD_SYMBOL(cuArrayDestroy, tcuArrayDestroy, "cuArrayDestroy");
+
+    LOAD_SYMBOL_OPT(cuEGLStreamProducerConnect, tcuEGLStreamProducerConnect, "cuEGLStreamProducerConnect");
+    LOAD_SYMBOL_OPT(cuEGLStreamProducerDisconnect, tcuEGLStreamProducerDisconnect, "cuEGLStreamProducerDisconnect");
+    LOAD_SYMBOL_OPT(cuEGLStreamConsumerDisconnect, tcuEGLStreamConsumerDisconnect, "cuEGLStreamConsumerDisconnect");
+    LOAD_SYMBOL_OPT(cuEGLStreamProducerPresentFrame, tcuEGLStreamProducerPresentFrame, "cuEGLStreamProducerPresentFrame");
+    LOAD_SYMBOL_OPT(cuEGLStreamProducerReturnFrame, tcuEGLStreamProducerReturnFrame, "cuEGLStreamProducerReturnFrame");
+
+#if defined(_WIN32) || defined(__CYGWIN__)
+    LOAD_SYMBOL(cuD3D11GetDevice, tcuD3D11GetDevice, "cuD3D11GetDevice");
+    LOAD_SYMBOL(cuD3D11GetDevices, tcuD3D11GetDevices, "cuD3D11GetDevices");
+    LOAD_SYMBOL(cuGraphicsD3D11RegisterResource, tcuGraphicsD3D11RegisterResource, "cuGraphicsD3D11RegisterResource");
+#endif
+
     GENERIC_LOAD_FUNC_FINALE(cuda);
 }
 #endif
 
+static inline int cuda_host_load_functions(CudaHostFunctions **functions, void *logctx)
+{
+    GENERIC_LOAD_FUNC_PREAMBLE(CudaHostFunctions, cuda_host, CUDA_LIBNAME);
+
+    LOAD_SYMBOL(cuCtxPushCurrent, tcuCtxPushCurrent_v2, "cuCtxPushCurrent_v2");
+    LOAD_SYMBOL(cuCtxPopCurrent, tcuCtxPopCurrent_v2, "cuCtxPopCurrent_v2");
+    LOAD_SYMBOL(cuMemHostAlloc, tcuMemHostAlloc, "cuMemHostAlloc");
+    LOAD_SYMBOL(cuMemFreeHost, tcuMemFreeHost, "cuMemFreeHost");
+    LOAD_SYMBOL(cuMemHostGetFlags, tcuMemHostGetFlags, "cuMemHostGetFlags");
+    LOAD_SYMBOL(cuMemHostRegister, tcuMemHostRegister_v2, "cuMemHostRegister_v2");
+    LOAD_SYMBOL(cuMemHostUnregister, tcuMemHostUnregister, "cuMemHostUnregister");
+
+    GENERIC_LOAD_FUNC_FINALE(cuda_host);
+}
+
 static inline int cuvid_load_functions(CuvidFunctions **functions, void *logctx)
 {
     GENERIC_LOAD_FUNC_PREAMBLE(CuvidFunctions, cuvid, NVCUVID_LIBNAME);
-- 
2.27.0.windows.1

